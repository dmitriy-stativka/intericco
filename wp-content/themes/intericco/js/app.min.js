"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

$(document).ready(function () {
  var _Swiper;

  var mySwiper = new Swiper('.swiper-main', (_Swiper = {
    speed: 400,
    spaceBetween: 100,
    //truewrapper adoptsheight of active slide
    autoHeight: false,
    // Optional parameters
    direction: 'horizontal',
    loop: true,
    // delay between transitions in ms
    autoplay: 5000,
    autoplayStopOnLast: false,
    // loop false also
    // If we need pagination
    pagination: {
      el: '.swiper-pagination',
      type: 'bullets',
      clickable: true,
      renderBullet: function renderBullet(index, className) {
        return '<span class="' + className + '">' + ('0' + (index + 1)) + '</span>';
      }
    },
    scrollbar: {
      el: '.slider-scrollbar',
      draggable: true,
      snapOnRelease: true
    },
    // Navigation arrows
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev'
    },
    breakpoints: {
      1024: {
        slidesPerView: 3
      }
    },
    // And if we need scrollbar
    //scrollbar: '.swiper-scrollbar',
    // "slide", "fade", "cube", "coverflow" or "flip"
    effect: 'slide'
  }, _defineProperty(_Swiper, "spaceBetween", 60), _defineProperty(_Swiper, "slidesPerView", 1), _defineProperty(_Swiper, "centeredSlides", false), _defineProperty(_Swiper, "grabCursor", true), _Swiper));
  var mySwiper = new Swiper(".blog-slider-container", {
    // Optional parameters
    slidesPerView: 2,
    slidesPerColumn: 2,
    direction: "horizontal",
    // loop: true,
    speed: 500,
    // If we need pagination
    pagination: {
      el: '.swiper-pagination',
      type: 'bullets',
      clickable: true,
      renderBullet: function renderBullet(index, className) {
        return '<span class="' + className + '">' + ('0' + (index + 1)) + '</span>';
      }
    },
    // Navigation arrows
    navigation: {
      nextEl: ".swiper-button-next",
      prevEl: ".swiper-button-prev"
    }
  }); //menu

  $(".menu-left-top").click(function () {
    // $("body").addClass("menu-opened");
    $(".navigation").addClass("navigation-open");
  });
  $(".menu-left-top-burger-close").click(function () {
    // $("body").removeClass("menu-opened");
    $(".navigation").removeClass("navigation-open");
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyIkIiwiZG9jdW1lbnQiLCJyZWFkeSIsIm15U3dpcGVyIiwiU3dpcGVyIiwic3BlZWQiLCJzcGFjZUJldHdlZW4iLCJhdXRvSGVpZ2h0IiwiZGlyZWN0aW9uIiwibG9vcCIsImF1dG9wbGF5IiwiYXV0b3BsYXlTdG9wT25MYXN0IiwicGFnaW5hdGlvbiIsImVsIiwidHlwZSIsImNsaWNrYWJsZSIsInJlbmRlckJ1bGxldCIsImluZGV4IiwiY2xhc3NOYW1lIiwic2Nyb2xsYmFyIiwiZHJhZ2dhYmxlIiwic25hcE9uUmVsZWFzZSIsIm5hdmlnYXRpb24iLCJuZXh0RWwiLCJwcmV2RWwiLCJicmVha3BvaW50cyIsInNsaWRlc1BlclZpZXciLCJlZmZlY3QiLCJzbGlkZXNQZXJDb2x1bW4iLCJjbGljayIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUFBLENBQUMsQ0FBQ0MsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBWTtBQUFBOztBQUcxQixNQUFJQyxRQUFRLEdBQUcsSUFBSUMsTUFBSixDQUFZLGNBQVo7QUFDWEMsSUFBQUEsS0FBSyxFQUFFLEdBREk7QUFFWEMsSUFBQUEsWUFBWSxFQUFFLEdBRkg7QUFHWDtBQUNBQyxJQUFBQSxVQUFVLEVBQUUsS0FKRDtBQUtYO0FBQ0FDLElBQUFBLFNBQVMsRUFBRSxZQU5BO0FBT1hDLElBQUFBLElBQUksRUFBRSxJQVBLO0FBUVg7QUFDQUMsSUFBQUEsUUFBUSxFQUFFLElBVEM7QUFVWEMsSUFBQUEsa0JBQWtCLEVBQUUsS0FWVDtBQVVnQjtBQUMzQjtBQUNBQyxJQUFBQSxVQUFVLEVBQUU7QUFDUkMsTUFBQUEsRUFBRSxFQUFFLG9CQURJO0FBRVJDLE1BQUFBLElBQUksRUFBRSxTQUZFO0FBR0ZDLE1BQUFBLFNBQVMsRUFBRSxJQUhUO0FBSUpDLE1BQUFBLFlBQVksRUFBRSxzQkFBVUMsS0FBVixFQUFpQkMsU0FBakIsRUFBNEI7QUFDdEMsZUFBTyxrQkFBa0JBLFNBQWxCLEdBQThCLElBQTlCLElBQXNDLE9BQU9ELEtBQUssR0FBRyxDQUFmLENBQXRDLElBQTJELFNBQWxFO0FBQ0g7QUFORyxLQVpEO0FBb0JYRSxJQUFBQSxTQUFTLEVBQUU7QUFDVE4sTUFBQUEsRUFBRSxFQUFFLG1CQURLO0FBRVRPLE1BQUFBLFNBQVMsRUFBRSxJQUZGO0FBR1RDLE1BQUFBLGFBQWEsRUFBRTtBQUhOLEtBcEJBO0FBMEJYO0FBQ0FDLElBQUFBLFVBQVUsRUFBRTtBQUNSQyxNQUFBQSxNQUFNLEVBQUUscUJBREE7QUFFUkMsTUFBQUEsTUFBTSxFQUFFO0FBRkEsS0EzQkQ7QUFnQ1RDLElBQUFBLFdBQVcsRUFBRTtBQUNYLFlBQU07QUFDSkMsUUFBQUEsYUFBYSxFQUFFO0FBRFg7QUFESyxLQWhDSjtBQXNDWDtBQUNBO0FBQ0E7QUFDQUMsSUFBQUEsTUFBTSxFQUFFO0FBekNHLDhDQTJDRyxFQTNDSCw2Q0E2Q0ksQ0E3Q0osOENBK0NLLEtBL0NMLDBDQWlEQyxJQWpERCxZQUFmO0FBb0RFLE1BQUl4QixRQUFRLEdBQUcsSUFBSUMsTUFBSixDQUFXLHdCQUFYLEVBQXFDO0FBQ2xEO0FBQ0FzQixJQUFBQSxhQUFhLEVBQUUsQ0FGbUM7QUFHbERFLElBQUFBLGVBQWUsRUFBRSxDQUhpQztBQUlsRHBCLElBQUFBLFNBQVMsRUFBRSxZQUp1QztBQUtsRDtBQUNBSCxJQUFBQSxLQUFLLEVBQUUsR0FOMkM7QUFRbEQ7QUFDQU8sSUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLE1BQUFBLEVBQUUsRUFBRSxvQkFETTtBQUVWQyxNQUFBQSxJQUFJLEVBQUUsU0FGSTtBQUdKQyxNQUFBQSxTQUFTLEVBQUUsSUFIUDtBQUlOQyxNQUFBQSxZQUFZLEVBQUUsc0JBQVVDLEtBQVYsRUFBaUJDLFNBQWpCLEVBQTRCO0FBQ3RDLGVBQU8sa0JBQWtCQSxTQUFsQixHQUE4QixJQUE5QixJQUFzQyxPQUFPRCxLQUFLLEdBQUcsQ0FBZixDQUF0QyxJQUEyRCxTQUFsRTtBQUNIO0FBTkssS0FUc0M7QUFrQmxEO0FBQ0FLLElBQUFBLFVBQVUsRUFBRTtBQUNWQyxNQUFBQSxNQUFNLEVBQUUscUJBREU7QUFFVkMsTUFBQUEsTUFBTSxFQUFFO0FBRkU7QUFuQnNDLEdBQXJDLENBQWYsQ0F2RHdCLENBaUYxQjs7QUFDQXhCLEVBQUFBLENBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CNkIsS0FBcEIsQ0FBMEIsWUFBVztBQUNuQztBQUNBN0IsSUFBQUEsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUFpQjhCLFFBQWpCLENBQTBCLGlCQUExQjtBQUNELEdBSEQ7QUFLQTlCLEVBQUFBLENBQUMsQ0FBQyw2QkFBRCxDQUFELENBQWlDNkIsS0FBakMsQ0FBdUMsWUFBVztBQUNoRDtBQUNBN0IsSUFBQUEsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUFpQitCLFdBQWpCLENBQTZCLGlCQUE3QjtBQUNELEdBSEQ7QUFNSCxDQTdGRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIFxyXG4gICAgdmFyIG15U3dpcGVyID0gbmV3IFN3aXBlciAoJy5zd2lwZXItbWFpbicsIHtcclxuICAgICAgICBzcGVlZDogNDAwLFxyXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMTAwLFxyXG4gICAgICAgIC8vdHJ1ZXdyYXBwZXIgYWRvcHRzaGVpZ2h0IG9mIGFjdGl2ZSBzbGlkZVxyXG4gICAgICAgIGF1dG9IZWlnaHQ6IGZhbHNlLFxyXG4gICAgICAgIC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcclxuICAgICAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcclxuICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgIC8vIGRlbGF5IGJldHdlZW4gdHJhbnNpdGlvbnMgaW4gbXNcclxuICAgICAgICBhdXRvcGxheTogNTAwMCxcclxuICAgICAgICBhdXRvcGxheVN0b3BPbkxhc3Q6IGZhbHNlLCAvLyBsb29wIGZhbHNlIGFsc29cclxuICAgICAgICAvLyBJZiB3ZSBuZWVkIHBhZ2luYXRpb25cclxuICAgICAgICBwYWdpbmF0aW9uOiB7XHJcbiAgICAgICAgICAgIGVsOiAnLnN3aXBlci1wYWdpbmF0aW9uJyxcclxuICAgICAgICAgICAgdHlwZTogJ2J1bGxldHMnLFxyXG4gICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZW5kZXJCdWxsZXQ6IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc05hbWUgKyAnXCI+JyArICgnMCcgKyAoaW5kZXggKyAxKSkgKyAnPC9zcGFuPic7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfSwgICAgIFxyXG4gICAgICAgIHNjcm9sbGJhcjoge1xyXG4gICAgICAgICAgZWw6ICcuc2xpZGVyLXNjcm9sbGJhcicsXHJcbiAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXHJcbiAgICAgICAgICBzbmFwT25SZWxlYXNlOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcclxuICAgICAgICAvLyBOYXZpZ2F0aW9uIGFycm93c1xyXG4gICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgbmV4dEVsOiAnLnN3aXBlci1idXR0b24tbmV4dCcsXHJcbiAgICAgICAgICAgIHByZXZFbDogJy5zd2lwZXItYnV0dG9uLXByZXYnLFxyXG4gICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgICAxMDI0OiB7XHJcbiAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogM1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEFuZCBpZiB3ZSBuZWVkIHNjcm9sbGJhclxyXG4gICAgICAgIC8vc2Nyb2xsYmFyOiAnLnN3aXBlci1zY3JvbGxiYXInLFxyXG4gICAgICAgIC8vIFwic2xpZGVcIiwgXCJmYWRlXCIsIFwiY3ViZVwiLCBcImNvdmVyZmxvd1wiIG9yIFwiZmxpcFwiXHJcbiAgICAgICAgZWZmZWN0OiAnc2xpZGUnLFxyXG4gICAgICAgIC8vIERpc3RhbmNlIGJldHdlZW4gc2xpZGVzIGluIHB4LlxyXG4gICAgICAgIHNwYWNlQmV0d2VlbjogNjAsXHJcbiAgICAgICAgLy9cclxuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgZ3JhYkN1cnNvcjogdHJ1ZSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB2YXIgbXlTd2lwZXIgPSBuZXcgU3dpcGVyKFwiLmJsb2ctc2xpZGVyLWNvbnRhaW5lclwiLCB7XHJcbiAgICAgICAgLy8gT3B0aW9uYWwgcGFyYW1ldGVyc1xyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDIsXHJcbiAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAyLFxyXG4gICAgICAgIGRpcmVjdGlvbjogXCJob3Jpem9udGFsXCIsXHJcbiAgICAgICAgLy8gbG9vcDogdHJ1ZSxcclxuICAgICAgICBzcGVlZDogNTAwLFxyXG4gICAgICBcclxuICAgICAgICAvLyBJZiB3ZSBuZWVkIHBhZ2luYXRpb25cclxuICAgICAgICBwYWdpbmF0aW9uOiB7XHJcbiAgICAgICAgICBlbDogJy5zd2lwZXItcGFnaW5hdGlvbicsXHJcbiAgICAgICAgICB0eXBlOiAnYnVsbGV0cycsXHJcbiAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgcmVuZGVyQnVsbGV0OiBmdW5jdGlvbiAoaW5kZXgsIGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwiJyArIGNsYXNzTmFtZSArICdcIj4nICsgKCcwJyArIChpbmRleCArIDEpKSArICc8L3NwYW4+JztcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sICBcclxuICAgICAgXHJcbiAgICAgICAgLy8gTmF2aWdhdGlvbiBhcnJvd3NcclxuICAgICAgICBuYXZpZ2F0aW9uOiB7XHJcbiAgICAgICAgICBuZXh0RWw6IFwiLnN3aXBlci1idXR0b24tbmV4dFwiLFxyXG4gICAgICAgICAgcHJldkVsOiBcIi5zd2lwZXItYnV0dG9uLXByZXZcIlxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgXHJcbiAgICAvL21lbnVcclxuICAgICQoXCIubWVudS1sZWZ0LXRvcFwiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgLy8gJChcImJvZHlcIikuYWRkQ2xhc3MoXCJtZW51LW9wZW5lZFwiKTtcclxuICAgICAgJChcIi5uYXZpZ2F0aW9uXCIpLmFkZENsYXNzKFwibmF2aWdhdGlvbi1vcGVuXCIpO1xyXG4gICAgfSlcclxuXHJcbiAgICAkKFwiLm1lbnUtbGVmdC10b3AtYnVyZ2VyLWNsb3NlXCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcIm1lbnUtb3BlbmVkXCIpO1xyXG4gICAgICAkKFwiLm5hdmlnYXRpb25cIikucmVtb3ZlQ2xhc3MoXCJuYXZpZ2F0aW9uLW9wZW5cIik7XHJcbiAgICB9KVxyXG4gICAgXHJcblxyXG59KTtcclxuXHJcblxyXG4iXSwiZmlsZSI6ImFwcC5taW4uanMifQ==
