"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

$(document).ready(function () {
  var _Swiper;

  var mySwiper = new Swiper('.swiper-main', (_Swiper = {
    speed: 400,
    spaceBetween: 100,
    //truewrapper adoptsheight of active slide
    autoHeight: false,
    // Optional parameters
    direction: 'horizontal',
    loop: true,
    // delay between transitions in ms
    autoplay: 5000,
    autoplayStopOnLast: false,
    // loop false also
    // If we need pagination
    pagination: {
      el: '.swiper-pagination',
      type: 'bullets',
      clickable: true,
      renderBullet: function renderBullet(index, className) {
        return '<span class="' + className + '">' + ('0' + (index + 1)) + '</span>';
      }
    },
    scrollbar: {
      el: '.slider-scrollbar',
      draggable: true,
      snapOnRelease: true
    },
    // Navigation arrows
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev'
    },
    breakpoints: {
      1024: {
        slidesPerView: 3
      }
    },
    // And if we need scrollbar
    //scrollbar: '.swiper-scrollbar',
    // "slide", "fade", "cube", "coverflow" or "flip"
    effect: 'slide'
  }, _defineProperty(_Swiper, "spaceBetween", 60), _defineProperty(_Swiper, "slidesPerView", 1), _defineProperty(_Swiper, "centeredSlides", true), _defineProperty(_Swiper, "grabCursor", true), _Swiper));
  var mySwiper = new Swiper(".blog-slider-container", {
    // Optional parameters
    direction: "horizontal",
    loop: true,
    speed: 500,
    // If we need pagination
    pagination: {
      el: '.swiper-pagination',
      type: 'bullets',
      clickable: true,
      renderBullet: function renderBullet(index, className) {
        return '<span class="' + className + '">' + ('0' + (index + 1)) + '</span>';
      }
    },
    // Navigation arrows
    navigation: {
      nextEl: ".swiper-button-next",
      prevEl: ".swiper-button-prev"
    }
  }); //menu

  $(".menu-left-top").click(function () {
    $("body").addClass("menu-opened");
    $(".navigation").addClass("navigation-open");
  });
  $(".menu-left-top-burger-close").click(function () {
    $("body").removeClass("menu-opened");
    $(".navigation").removeClass("navigation-open");
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyIkIiwiZG9jdW1lbnQiLCJyZWFkeSIsIm15U3dpcGVyIiwiU3dpcGVyIiwic3BlZWQiLCJzcGFjZUJldHdlZW4iLCJhdXRvSGVpZ2h0IiwiZGlyZWN0aW9uIiwibG9vcCIsImF1dG9wbGF5IiwiYXV0b3BsYXlTdG9wT25MYXN0IiwicGFnaW5hdGlvbiIsImVsIiwidHlwZSIsImNsaWNrYWJsZSIsInJlbmRlckJ1bGxldCIsImluZGV4IiwiY2xhc3NOYW1lIiwic2Nyb2xsYmFyIiwiZHJhZ2dhYmxlIiwic25hcE9uUmVsZWFzZSIsIm5hdmlnYXRpb24iLCJuZXh0RWwiLCJwcmV2RWwiLCJicmVha3BvaW50cyIsInNsaWRlc1BlclZpZXciLCJlZmZlY3QiLCJjbGljayIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUFBLENBQUMsQ0FBQ0MsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBWTtBQUFBOztBQUcxQixNQUFJQyxRQUFRLEdBQUcsSUFBSUMsTUFBSixDQUFZLGNBQVo7QUFDWEMsSUFBQUEsS0FBSyxFQUFFLEdBREk7QUFFWEMsSUFBQUEsWUFBWSxFQUFFLEdBRkg7QUFHWDtBQUNBQyxJQUFBQSxVQUFVLEVBQUUsS0FKRDtBQUtYO0FBQ0FDLElBQUFBLFNBQVMsRUFBRSxZQU5BO0FBT1hDLElBQUFBLElBQUksRUFBRSxJQVBLO0FBUVg7QUFDQUMsSUFBQUEsUUFBUSxFQUFFLElBVEM7QUFVWEMsSUFBQUEsa0JBQWtCLEVBQUUsS0FWVDtBQVVnQjtBQUMzQjtBQUNBQyxJQUFBQSxVQUFVLEVBQUU7QUFDUkMsTUFBQUEsRUFBRSxFQUFFLG9CQURJO0FBRVJDLE1BQUFBLElBQUksRUFBRSxTQUZFO0FBR0ZDLE1BQUFBLFNBQVMsRUFBRSxJQUhUO0FBSUpDLE1BQUFBLFlBQVksRUFBRSxzQkFBVUMsS0FBVixFQUFpQkMsU0FBakIsRUFBNEI7QUFDdEMsZUFBTyxrQkFBa0JBLFNBQWxCLEdBQThCLElBQTlCLElBQXNDLE9BQU9ELEtBQUssR0FBRyxDQUFmLENBQXRDLElBQTJELFNBQWxFO0FBQ0g7QUFORyxLQVpEO0FBb0JYRSxJQUFBQSxTQUFTLEVBQUU7QUFDVE4sTUFBQUEsRUFBRSxFQUFFLG1CQURLO0FBRVRPLE1BQUFBLFNBQVMsRUFBRSxJQUZGO0FBR1RDLE1BQUFBLGFBQWEsRUFBRTtBQUhOLEtBcEJBO0FBMEJYO0FBQ0FDLElBQUFBLFVBQVUsRUFBRTtBQUNSQyxNQUFBQSxNQUFNLEVBQUUscUJBREE7QUFFUkMsTUFBQUEsTUFBTSxFQUFFO0FBRkEsS0EzQkQ7QUFnQ1RDLElBQUFBLFdBQVcsRUFBRTtBQUNYLFlBQU07QUFDSkMsUUFBQUEsYUFBYSxFQUFFO0FBRFg7QUFESyxLQWhDSjtBQXNDWDtBQUNBO0FBQ0E7QUFDQUMsSUFBQUEsTUFBTSxFQUFFO0FBekNHLDhDQTJDRyxFQTNDSCw2Q0E2Q0ksQ0E3Q0osOENBK0NLLElBL0NMLDBDQWlEQyxJQWpERCxZQUFmO0FBb0RFLE1BQUl4QixRQUFRLEdBQUcsSUFBSUMsTUFBSixDQUFXLHdCQUFYLEVBQXFDO0FBQ2xEO0FBQ0FJLElBQUFBLFNBQVMsRUFBRSxZQUZ1QztBQUdsREMsSUFBQUEsSUFBSSxFQUFFLElBSDRDO0FBSWxESixJQUFBQSxLQUFLLEVBQUUsR0FKMkM7QUFNbEQ7QUFDQU8sSUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLE1BQUFBLEVBQUUsRUFBRSxvQkFETTtBQUVWQyxNQUFBQSxJQUFJLEVBQUUsU0FGSTtBQUdKQyxNQUFBQSxTQUFTLEVBQUUsSUFIUDtBQUlOQyxNQUFBQSxZQUFZLEVBQUUsc0JBQVVDLEtBQVYsRUFBaUJDLFNBQWpCLEVBQTRCO0FBQ3RDLGVBQU8sa0JBQWtCQSxTQUFsQixHQUE4QixJQUE5QixJQUFzQyxPQUFPRCxLQUFLLEdBQUcsQ0FBZixDQUF0QyxJQUEyRCxTQUFsRTtBQUNIO0FBTkssS0FQc0M7QUFnQmxEO0FBQ0FLLElBQUFBLFVBQVUsRUFBRTtBQUNWQyxNQUFBQSxNQUFNLEVBQUUscUJBREU7QUFFVkMsTUFBQUEsTUFBTSxFQUFFO0FBRkU7QUFqQnNDLEdBQXJDLENBQWYsQ0F2RHdCLENBK0UxQjs7QUFDQXhCLEVBQUFBLENBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CNEIsS0FBcEIsQ0FBMEIsWUFBVztBQUNuQzVCLElBQUFBLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVTZCLFFBQVYsQ0FBbUIsYUFBbkI7QUFDQTdCLElBQUFBLENBQUMsQ0FBQyxhQUFELENBQUQsQ0FBaUI2QixRQUFqQixDQUEwQixpQkFBMUI7QUFDRCxHQUhEO0FBS0E3QixFQUFBQSxDQUFDLENBQUMsNkJBQUQsQ0FBRCxDQUFpQzRCLEtBQWpDLENBQXVDLFlBQVc7QUFDaEQ1QixJQUFBQSxDQUFDLENBQUMsTUFBRCxDQUFELENBQVU4QixXQUFWLENBQXNCLGFBQXRCO0FBQ0E5QixJQUFBQSxDQUFDLENBQUMsYUFBRCxDQUFELENBQWlCOEIsV0FBakIsQ0FBNkIsaUJBQTdCO0FBQ0QsR0FIRDtBQU1ILENBM0ZEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgXHJcbiAgICB2YXIgbXlTd2lwZXIgPSBuZXcgU3dpcGVyICgnLnN3aXBlci1tYWluJywge1xyXG4gICAgICAgIHNwZWVkOiA0MDAsXHJcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAxMDAsXHJcbiAgICAgICAgLy90cnVld3JhcHBlciBhZG9wdHNoZWlnaHQgb2YgYWN0aXZlIHNsaWRlXHJcbiAgICAgICAgYXV0b0hlaWdodDogZmFsc2UsXHJcbiAgICAgICAgLy8gT3B0aW9uYWwgcGFyYW1ldGVyc1xyXG4gICAgICAgIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxyXG4gICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgLy8gZGVsYXkgYmV0d2VlbiB0cmFuc2l0aW9ucyBpbiBtc1xyXG4gICAgICAgIGF1dG9wbGF5OiA1MDAwLFxyXG4gICAgICAgIGF1dG9wbGF5U3RvcE9uTGFzdDogZmFsc2UsIC8vIGxvb3AgZmFsc2UgYWxzb1xyXG4gICAgICAgIC8vIElmIHdlIG5lZWQgcGFnaW5hdGlvblxyXG4gICAgICAgIHBhZ2luYXRpb246IHtcclxuICAgICAgICAgICAgZWw6ICcuc3dpcGVyLXBhZ2luYXRpb24nLFxyXG4gICAgICAgICAgICB0eXBlOiAnYnVsbGV0cycsXHJcbiAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHJlbmRlckJ1bGxldDogZnVuY3Rpb24gKGluZGV4LCBjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwiJyArIGNsYXNzTmFtZSArICdcIj4nICsgKCcwJyArIChpbmRleCArIDEpKSArICc8L3NwYW4+JztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICB9LCAgICAgXHJcbiAgICAgICAgc2Nyb2xsYmFyOiB7XHJcbiAgICAgICAgICBlbDogJy5zbGlkZXItc2Nyb2xsYmFyJyxcclxuICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcclxuICAgICAgICAgIHNuYXBPblJlbGVhc2U6IHRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIE5hdmlnYXRpb24gYXJyb3dzXHJcbiAgICAgICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICAgICAgICBuZXh0RWw6ICcuc3dpcGVyLWJ1dHRvbi1uZXh0JyxcclxuICAgICAgICAgICAgcHJldkVsOiAnLnN3aXBlci1idXR0b24tcHJldicsXHJcbiAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAgICAgICAgIDEwMjQ6IHtcclxuICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQW5kIGlmIHdlIG5lZWQgc2Nyb2xsYmFyXHJcbiAgICAgICAgLy9zY3JvbGxiYXI6ICcuc3dpcGVyLXNjcm9sbGJhcicsXHJcbiAgICAgICAgLy8gXCJzbGlkZVwiLCBcImZhZGVcIiwgXCJjdWJlXCIsIFwiY292ZXJmbG93XCIgb3IgXCJmbGlwXCJcclxuICAgICAgICBlZmZlY3Q6ICdzbGlkZScsXHJcbiAgICAgICAgLy8gRGlzdGFuY2UgYmV0d2VlbiBzbGlkZXMgaW4gcHguXHJcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiA2MCxcclxuICAgICAgICAvL1xyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgICAgLy9cclxuICAgICAgICBjZW50ZXJlZFNsaWRlczogdHJ1ZSxcclxuICAgICAgICAvL1xyXG4gICAgICAgIGdyYWJDdXJzb3I6IHRydWUsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdmFyIG15U3dpcGVyID0gbmV3IFN3aXBlcihcIi5ibG9nLXNsaWRlci1jb250YWluZXJcIiwge1xyXG4gICAgICAgIC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcclxuICAgICAgICBkaXJlY3Rpb246IFwiaG9yaXpvbnRhbFwiLFxyXG4gICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgc3BlZWQ6IDUwMCxcclxuICAgICAgXHJcbiAgICAgICAgLy8gSWYgd2UgbmVlZCBwYWdpbmF0aW9uXHJcbiAgICAgICAgcGFnaW5hdGlvbjoge1xyXG4gICAgICAgICAgZWw6ICcuc3dpcGVyLXBhZ2luYXRpb24nLFxyXG4gICAgICAgICAgdHlwZTogJ2J1bGxldHMnLFxyXG4gICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgIHJlbmRlckJ1bGxldDogZnVuY3Rpb24gKGluZGV4LCBjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuICc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc05hbWUgKyAnXCI+JyArICgnMCcgKyAoaW5kZXggKyAxKSkgKyAnPC9zcGFuPic7XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICB9LCAgXHJcbiAgICAgIFxyXG4gICAgICAgIC8vIE5hdmlnYXRpb24gYXJyb3dzXHJcbiAgICAgICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICAgICAgbmV4dEVsOiBcIi5zd2lwZXItYnV0dG9uLW5leHRcIixcclxuICAgICAgICAgIHByZXZFbDogXCIuc3dpcGVyLWJ1dHRvbi1wcmV2XCJcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgIFxyXG4gICAgLy9tZW51XHJcbiAgICAkKFwiLm1lbnUtbGVmdC10b3BcIikuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwibWVudS1vcGVuZWRcIik7XHJcbiAgICAgICQoXCIubmF2aWdhdGlvblwiKS5hZGRDbGFzcyhcIm5hdmlnYXRpb24tb3BlblwiKTtcclxuICAgIH0pXHJcblxyXG4gICAgJChcIi5tZW51LWxlZnQtdG9wLWJ1cmdlci1jbG9zZVwiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJtZW51LW9wZW5lZFwiKTtcclxuICAgICAgJChcIi5uYXZpZ2F0aW9uXCIpLnJlbW92ZUNsYXNzKFwibmF2aWdhdGlvbi1vcGVuXCIpO1xyXG4gICAgfSlcclxuICAgIFxyXG5cclxufSk7XHJcblxyXG5cclxuIl0sImZpbGUiOiJhcHAubWluLmpzIn0=
