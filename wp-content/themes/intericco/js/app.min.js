"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

$(document).ready(function () {
  var _Swiper;

  var mySwiper = new Swiper('.swiper-main', (_Swiper = {
    speed: 400,
    spaceBetween: 100,
    //truewrapper adoptsheight of active slide
    autoHeight: false,
    // Optional parameters
    direction: 'horizontal',
    loop: true,
    // delay between transitions in ms
    autoplay: 5000,
    autoplayStopOnLast: false,
    // loop false also
    // If we need pagination
    pagination: {
      el: '.swiper-pagination',
      type: 'bullets',
      clickable: true,
      renderBullet: function renderBullet(index, className) {
        return '<span class="' + className + '">' + ('0' + (index + 1)) + '</span>';
      }
    },
    scrollbar: {
      el: '.slider-scrollbar',
      draggable: true,
      snapOnRelease: true
    },
    // Navigation arrows
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev'
    },
    // And if we need scrollbar
    //scrollbar: '.swiper-scrollbar',
    // "slide", "fade", "cube", "coverflow" or "flip"
    effect: 'slide'
  }, _defineProperty(_Swiper, "spaceBetween", 60), _defineProperty(_Swiper, "slidesPerView", 3), _defineProperty(_Swiper, "centeredSlides", true), _defineProperty(_Swiper, "grabCursor", true), _Swiper));
  var swiper = new Swiper('.service-middle-main', {
    direction: 'horizontal',
    slidesPerView: 2,
    loop: true,
    spaceBetween: 0,
    mousewheelControl: true,
    speed: 600,
    navigation: {
      nextEl: '.service-button-next'
    }
  }); //menu

  $(".menu-left-top").click(function () {
    $("body").addClass("menu-opened");
    $(".navigation").addClass("navigation-open");
  });
  $(".menu-left-top-burger-close").click(function () {
    $("body").removeClass("menu-opened");
    $(".navigation").removeClass("navigation-open");
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyIkIiwiZG9jdW1lbnQiLCJyZWFkeSIsIm15U3dpcGVyIiwiU3dpcGVyIiwic3BlZWQiLCJzcGFjZUJldHdlZW4iLCJhdXRvSGVpZ2h0IiwiZGlyZWN0aW9uIiwibG9vcCIsImF1dG9wbGF5IiwiYXV0b3BsYXlTdG9wT25MYXN0IiwicGFnaW5hdGlvbiIsImVsIiwidHlwZSIsImNsaWNrYWJsZSIsInJlbmRlckJ1bGxldCIsImluZGV4IiwiY2xhc3NOYW1lIiwic2Nyb2xsYmFyIiwiZHJhZ2dhYmxlIiwic25hcE9uUmVsZWFzZSIsIm5hdmlnYXRpb24iLCJuZXh0RWwiLCJwcmV2RWwiLCJlZmZlY3QiLCJzd2lwZXIiLCJzbGlkZXNQZXJWaWV3IiwibW91c2V3aGVlbENvbnRyb2wiLCJjbGljayIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUFBLENBQUMsQ0FBQ0MsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBWTtBQUFBOztBQUcxQixNQUFJQyxRQUFRLEdBQUcsSUFBSUMsTUFBSixDQUFZLGNBQVo7QUFDWEMsSUFBQUEsS0FBSyxFQUFFLEdBREk7QUFFWEMsSUFBQUEsWUFBWSxFQUFFLEdBRkg7QUFHWDtBQUNBQyxJQUFBQSxVQUFVLEVBQUUsS0FKRDtBQUtYO0FBQ0FDLElBQUFBLFNBQVMsRUFBRSxZQU5BO0FBT1hDLElBQUFBLElBQUksRUFBRSxJQVBLO0FBUVg7QUFDQUMsSUFBQUEsUUFBUSxFQUFFLElBVEM7QUFVWEMsSUFBQUEsa0JBQWtCLEVBQUUsS0FWVDtBQVVnQjtBQUMzQjtBQUNBQyxJQUFBQSxVQUFVLEVBQUU7QUFDUkMsTUFBQUEsRUFBRSxFQUFFLG9CQURJO0FBRVJDLE1BQUFBLElBQUksRUFBRSxTQUZFO0FBR0ZDLE1BQUFBLFNBQVMsRUFBRSxJQUhUO0FBSUpDLE1BQUFBLFlBQVksRUFBRSxzQkFBVUMsS0FBVixFQUFpQkMsU0FBakIsRUFBNEI7QUFDdEMsZUFBTyxrQkFBa0JBLFNBQWxCLEdBQThCLElBQTlCLElBQXNDLE9BQU9ELEtBQUssR0FBRyxDQUFmLENBQXRDLElBQTJELFNBQWxFO0FBQ0g7QUFORyxLQVpEO0FBb0JYRSxJQUFBQSxTQUFTLEVBQUU7QUFDVE4sTUFBQUEsRUFBRSxFQUFFLG1CQURLO0FBRVRPLE1BQUFBLFNBQVMsRUFBRSxJQUZGO0FBR1RDLE1BQUFBLGFBQWEsRUFBRTtBQUhOLEtBcEJBO0FBMEJYO0FBQ0FDLElBQUFBLFVBQVUsRUFBRTtBQUNSQyxNQUFBQSxNQUFNLEVBQUUscUJBREE7QUFFUkMsTUFBQUEsTUFBTSxFQUFFO0FBRkEsS0EzQkQ7QUFnQ1g7QUFDQTtBQUNBO0FBQ0FDLElBQUFBLE1BQU0sRUFBRTtBQW5DRyw4Q0FxQ0csRUFyQ0gsNkNBdUNJLENBdkNKLDhDQXlDSyxJQXpDTCwwQ0EyQ0MsSUEzQ0QsWUFBZjtBQThDRSxNQUFJQyxNQUFNLEdBQUcsSUFBSXRCLE1BQUosQ0FBVyxzQkFBWCxFQUFtQztBQUM5Q0ksSUFBQUEsU0FBUyxFQUFFLFlBRG1DO0FBRTlDbUIsSUFBQUEsYUFBYSxFQUFFLENBRitCO0FBRzlDbEIsSUFBQUEsSUFBSSxFQUFFLElBSHdDO0FBSTlDSCxJQUFBQSxZQUFZLEVBQUUsQ0FKZ0M7QUFLOUNzQixJQUFBQSxpQkFBaUIsRUFBRSxJQUwyQjtBQU05Q3ZCLElBQUFBLEtBQUssRUFBRSxHQU51QztBQU85Q2lCLElBQUFBLFVBQVUsRUFBRTtBQUNWQyxNQUFBQSxNQUFNLEVBQUU7QUFERTtBQVBrQyxHQUFuQyxDQUFiLENBakR3QixDQThEMUI7O0FBQ0F2QixFQUFBQSxDQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQUFvQjZCLEtBQXBCLENBQTBCLFlBQVc7QUFDbkM3QixJQUFBQSxDQUFDLENBQUMsTUFBRCxDQUFELENBQVU4QixRQUFWLENBQW1CLGFBQW5CO0FBQ0E5QixJQUFBQSxDQUFDLENBQUMsYUFBRCxDQUFELENBQWlCOEIsUUFBakIsQ0FBMEIsaUJBQTFCO0FBQ0QsR0FIRDtBQUtBOUIsRUFBQUEsQ0FBQyxDQUFDLDZCQUFELENBQUQsQ0FBaUM2QixLQUFqQyxDQUF1QyxZQUFXO0FBQ2hEN0IsSUFBQUEsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVK0IsV0FBVixDQUFzQixhQUF0QjtBQUNBL0IsSUFBQUEsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUFpQitCLFdBQWpCLENBQTZCLGlCQUE3QjtBQUNELEdBSEQ7QUFNSCxDQTFFRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIFxyXG4gICAgdmFyIG15U3dpcGVyID0gbmV3IFN3aXBlciAoJy5zd2lwZXItbWFpbicsIHtcclxuICAgICAgICBzcGVlZDogNDAwLFxyXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMTAwLFxyXG4gICAgICAgIC8vdHJ1ZXdyYXBwZXIgYWRvcHRzaGVpZ2h0IG9mIGFjdGl2ZSBzbGlkZVxyXG4gICAgICAgIGF1dG9IZWlnaHQ6IGZhbHNlLFxyXG4gICAgICAgIC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcclxuICAgICAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcclxuICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgIC8vIGRlbGF5IGJldHdlZW4gdHJhbnNpdGlvbnMgaW4gbXNcclxuICAgICAgICBhdXRvcGxheTogNTAwMCxcclxuICAgICAgICBhdXRvcGxheVN0b3BPbkxhc3Q6IGZhbHNlLCAvLyBsb29wIGZhbHNlIGFsc29cclxuICAgICAgICAvLyBJZiB3ZSBuZWVkIHBhZ2luYXRpb25cclxuICAgICAgICBwYWdpbmF0aW9uOiB7XHJcbiAgICAgICAgICAgIGVsOiAnLnN3aXBlci1wYWdpbmF0aW9uJyxcclxuICAgICAgICAgICAgdHlwZTogJ2J1bGxldHMnLFxyXG4gICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZW5kZXJCdWxsZXQ6IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc05hbWUgKyAnXCI+JyArICgnMCcgKyAoaW5kZXggKyAxKSkgKyAnPC9zcGFuPic7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfSwgICAgIFxyXG4gICAgICAgIHNjcm9sbGJhcjoge1xyXG4gICAgICAgICAgZWw6ICcuc2xpZGVyLXNjcm9sbGJhcicsXHJcbiAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXHJcbiAgICAgICAgICBzbmFwT25SZWxlYXNlOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcclxuICAgICAgICAvLyBOYXZpZ2F0aW9uIGFycm93c1xyXG4gICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgbmV4dEVsOiAnLnN3aXBlci1idXR0b24tbmV4dCcsXHJcbiAgICAgICAgICAgIHByZXZFbDogJy5zd2lwZXItYnV0dG9uLXByZXYnLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBcclxuICAgICAgICAvLyBBbmQgaWYgd2UgbmVlZCBzY3JvbGxiYXJcclxuICAgICAgICAvL3Njcm9sbGJhcjogJy5zd2lwZXItc2Nyb2xsYmFyJyxcclxuICAgICAgICAvLyBcInNsaWRlXCIsIFwiZmFkZVwiLCBcImN1YmVcIiwgXCJjb3ZlcmZsb3dcIiBvciBcImZsaXBcIlxyXG4gICAgICAgIGVmZmVjdDogJ3NsaWRlJyxcclxuICAgICAgICAvLyBEaXN0YW5jZSBiZXR3ZWVuIHNsaWRlcyBpbiBweC5cclxuICAgICAgICBzcGFjZUJldHdlZW46IDYwLFxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMyxcclxuICAgICAgICAvL1xyXG4gICAgICAgIGNlbnRlcmVkU2xpZGVzOiB0cnVlLFxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgZ3JhYkN1cnNvcjogdHJ1ZSxcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgc3dpcGVyID0gbmV3IFN3aXBlcignLnNlcnZpY2UtbWlkZGxlLW1haW4nLCB7XHJcbiAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMixcclxuICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMCxcclxuICAgICAgICBtb3VzZXdoZWVsQ29udHJvbDogdHJ1ZSwgIFxyXG4gICAgICAgIHNwZWVkOiA2MDAsXHJcbiAgICAgICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICAgICAgbmV4dEVsOiAnLnNlcnZpY2UtYnV0dG9uLW5leHQnLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgLy9tZW51XHJcbiAgICAkKFwiLm1lbnUtbGVmdC10b3BcIikuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwibWVudS1vcGVuZWRcIik7XHJcbiAgICAgICQoXCIubmF2aWdhdGlvblwiKS5hZGRDbGFzcyhcIm5hdmlnYXRpb24tb3BlblwiKTtcclxuICAgIH0pXHJcblxyXG4gICAgJChcIi5tZW51LWxlZnQtdG9wLWJ1cmdlci1jbG9zZVwiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJtZW51LW9wZW5lZFwiKTtcclxuICAgICAgJChcIi5uYXZpZ2F0aW9uXCIpLnJlbW92ZUNsYXNzKFwibmF2aWdhdGlvbi1vcGVuXCIpO1xyXG4gICAgfSlcclxuICAgIFxyXG5cclxufSk7XHJcblxyXG5cclxuIl0sImZpbGUiOiJhcHAubWluLmpzIn0=
